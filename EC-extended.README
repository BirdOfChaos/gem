1) load compiler

# G COMPILER
# Load G compiler and libraries
. r.load.dot /ssm/net/hpcs/compilers/gcc-5.1.0/gcc_5.1.0_ubuntu-14.04-amd64-64
. ssmuse-sh -p /ssm/net/hpcs/201402/master/openmpi_1.6.5_ubuntu-12.04-amd64-64

#INTEL COMPILER 2016
#EC workstation
# Load INTEL compiler and libraries
# default version of Intel compiler used: 19.
# to use version 13, change the link in the sources directory:
# cd gem_on_a_stick_5.1.a6/sources
# rm Linux-x86_64-intel.cmake
# ln -s Linux-x86_64-intel.cmake.16 Linux-x86_64-intel.cmake
# changes to the C and Fortran flags can be done in the Linux-x86_64-intel.cmake
#. r.load.dot rpn/utils/16.2.2 # if not already done
#. r.module.dot
. r.load.dot /ssm/net/hpcs/201402/04/base /ssm/net/hpcs/exp/intel2016/01

#eccc-ppp* 
INTEL:
. ssmuse-sh -x main/opt/intelcomp/intelcomp-2016.1.156
. ssmuse-sh -x main/opt/openmpi/openmpi-1.6.5/intelcomp-2016.1.156

#INTEL COMPILER 2019
#hpcr1-in
#hpcr2-in
#rutherford
. r.load.dot /fs/ssm/hpco/exp/intelpsxe-cluster-19.0.3.199 rpn/base/01.0
. r.load.dot /fs/ssm/hpco/exp/openmpi/openmpi-3.1.2--hpcx-2.2.0--ofed-4.4.2--intel-2019.0.045

#PGI COMPILER 17.10 on lorentz
# Load PGI compiler and libraries
PGI=/local/raid/armn/CUDA/PGI/pgi; export PGI
MANPATH=$MANPATH:$PGI/linux86-64/17.10/man; export MANPATH
LM_LICENSE_FILE=$PGI/license.dat; export LM_LICENSE_FILE
PATH=$PGI/linux86-64/17.10/bin:$PATH; export PATH
export LD_LIBRARY_PATH=$PGI/linux86-64/17.10/lib:$LD_LIBRARY_PATH
export PATH=$PGI/linux86-64/17.10/mpi/openmpi/bin:$PATH
export MANPATH=$MANPATH:$PGI/linux86-64/17.10/mpi/openmpi/man

#PGI COMPILER 18.4 on einstein --> compiles (not with -g) and does not run
cd gem_on_a_stick_[version]/sources
rm Linux-x86_64-pgi.cmake; ln -s Linux-x86_64-pgi.cmake_18.4 Linux-x86_64-pgi.cmake
export MODULEPATH=$MODULEPATH:/opt/pgi/modulefiles
module load PrgEnv-pgi/18.4

2) build GEM

#configure GEM
cd gem_on_a_stick_[version]/sources/
#default compiler: gfortran
#if you want to compile with another compiler:
#modify sources/CMakelists.txt for desired compiler (line 9)
#make sure link of Linux*.cmake matches right compiler version
#eg: ln -s Linux-x86_64-intel.cmake.16 Linux-x86_64-intel.cmake
mkdir -p build
cd build
cmake ..

#if compiler or compile options are not right:
# make appropriate changes to the cmake file named according to the Fortran
# compiler you are using, in the sources directory, for example:
# Linux-x86_64-gfortran.cmake if you compile with gfortran or
# Linux-x86_64-intel.cmake if you compile with Intel

cd gem_on_a_stick_[version]/sources/build
\rm -rf *
cmake ..

#build and install GEM
make -j
make install

a directory named after the EC environment variable $BASE_ARCH and the
compiler you used (for example: Linux_x86-64-intel-16.0.1.150) is created in
the work directory of GEM on a stick, and the following binaries are
installed in a bin directory in it: maingemdm, maingemgrid, mainyy2global,
flipit, r.fstinfo, voir, editfst, fststat, cclargs_lite, pgsm

3) run GEM

If you want to use your own dataset, change the variable default_DIR_ATM in
scripts runprep and runmod, either in the sources/orig-scripts directory, or
in the working directory (in the latter case, be advised that any changes to
the scripts will be erased at the next "make install" step. Modifications in 
configuration files "xxx_cfg" in the working directory are saved.)

cd gem_on_a_stick_[version]/work/work[BASE_ARCH_COMPILER-NAME]

#default configuration for runprep and runmod is GEM_cfgs
./runprep
./runmod -ptopo 2x2x1 (to use 4 cpus for LU, 8 cpus for GY)

#to run bubble case
./runprep -dircfg Bubble_cfgs
./runmod -dircfg Bubble_cfgs -ptopo 5x1
\rm bubble
./flipit -i RUNMOD.dir/output/cfg_0000/laststep_0000000120/000-000/dm2011012200-000-000_001 -o bubble
xrec -imflds bubble
variable TH, step 120, contour 0

#to run GY_cfgs
./runprep -dircfg GY_cfgs
./runmod -dircfg GY_cfgs

default setup uses the command "mpirun" to run the model.  This command can
be modified in the file scripts/Um_model.sh, line 34, either in the original
sources of the scripts (sources/orig-scripts/scripts) or in the working
directory (work/work-[BASE_ARCH-COMPILER_NAME]/scripts). In the latter case,
be advised that any changes to the scripts will be erased at the next "make
install" step. So, if you want your changes to the scripts to be permanent,
make them in the sources/orig-scripts/scripts directory, and then rerun the
command make install in the sources/build directory.

4) Tools provided to inspect the outputs
#Documentation is in internal website:
https://wiki.cmc.ec.gc.ca/wiki/RPN-SI/RpnUtilities

#Use voir to see what records are produced in the FST files
./voir -iment RUNMOD.dir/output/cfg_0000/laststep_0000000024/000-000/dm2009042700-000-000_010

#Use fststat to look at statistical means on the records

./fststat -fst RUNMOD.dir/output/cfg_0000/laststep_0000000024/000-000/dm2009042700-000-000_010

#pgsm is a program to interpolate records to a different grid
./pgsm -iment <input FST> -ozsrt <output FST> -i <pgsm.directives>

#editfst is a program to manipulate records into another file
./editfst -s <input FST> -d <output FST> -i <editfst.directives>
